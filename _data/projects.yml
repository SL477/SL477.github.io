- name: SMS Classifier
  url: /
  repository: flaskSMSClassifier
  picture: SMSClassifier
  picture_text: SMS Classifier Screenshot
  description: |
    This project originally started as my answer to [FreeCodeCamp SMS Classifier](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/neural-network-sms-text-classifier).
    
    In this project I created my first Flask Web App (not including the tutorial I did). Plus my first Docker Container (outside of a tutorial). Originally this used TensorFlow as the machine learning library, but I have now changed this to SciKit Learn.
    
    In the web app you can test the classification of various texts, the client side JavaScript will post a request to the API which in turn will consult the saved SKLearn model. You can then press the ""Add to database"" button, this will push it into the local database (a SQLite database inside the Docker container). In the data table at the front end you can flip the classification of messages between spam and ham. You can also delete that entry out of the database.
    
    Pressing the "Retrain Model" button will cause the Flask server to retrain the Machine Learning model on the data in the SQLite database. It will then test the model against the validation data from FreeCodeCamp (the main data is also from FreeCodeCamp). This may take a little while, it will then save the model in the Docker container and then use that. To build the model manually you can run the file modelmaker.py.
- name: Predict Health Costs With Regression
  url: https://sl477-fccpredicthealthcostswithregression-main-tdzqp8.streamlitapp.com
  repository: fccPredictHealthCostsWithRegression
  picture: HealthCostPredictions
  picture_text: Health Cost Predictor Screenshot
  description: |
    This project started as my answer to [FreeCodeCamp Predict Health Costs With Regression](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/linear-regression-health-costs-calculator).

    Here I created my first Streamlit App, and then discovered how hard it was to put streamlit into a Docker container.

    Here you can see the difference between the model's predictions and the actual data. You can then use the controls to predict your health costs.

    I later revisited it to tear out all of the TensorFlow code and replace its model with a Random Forest Regressor
- name: Chart the Stock Market
  url: https://limitless-ridge-52978.herokuapp.com/
  repository: flask-stockMarketChart
  picture: ChartTheStockMarket
  picture_text: Chart the Stock Market Screenshot
  description: |
    This project started as my answer to [FreeCodeCamp Chart the Stock Market](https://www.freecodecamp.org/learn/coding-interview-prep/take-home-projects/chart-the-stock-market).
    
    Here I created a flask app with web sockets.
    
    This started life with the JavaScript being in charge of the visualisations in D3. This used a huge amount of code to draw the graph. I then decided to get Python to parse the data and draw the graph, passing the Base64 string back to JavaScript. Jupyter Labs was useful to design the function and then I copied the code out into a python file.
    
    After quite a few attempts I got the app onto Heroku. This was quite a bit more complicated than I thought it would be. I first found out about the existence of Gunicorn and then how to use it. From this I also found out about using .env files in Python (something that I had done in Node.JS and thought would be a good idea in Python).
- name: Cat and Dog Image Classifier
  url: /
  repository: fccCatAndDog
  picture: CatAndDogImageClassifier
  picture_text: Cat and Dog Image Classifier screenshot
  description: |
    This started out as my answer to [FreeCodeCamp Cat and Dog Image Classifier](https://www.freecodecamp.org/learn/machine-learning-with-python/machine-learning-with-python-projects/cat-and-dog-image-classifier).

    I created a Node.JS app which uses TensorFlow.JS with the converted model I made to determine whether the image passed is more likely to be a cat or a dog (with not so great accuracy).